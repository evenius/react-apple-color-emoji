import lib from 'emojilib/dist/emoji-en-US.json'
import { readFile, writeFile } from 'fs/promises';
import { join, resolve } from 'path';


const emojiList = Object.keys(lib) as (keyof typeof lib)[]
const utf16FromString = (emoji: string) => emojiList[0].codePointAt(0)?.toString(16);

const specialCharPattern = ['_',' ', '\\-'].join('');

const specialChars = new RegExp(`[${specialCharPattern}]([A-z0-9])`, 'g')
const endingSpecialChar = new RegExp(`[${specialCharPattern}]+$`)

const anySpecialChar = new RegExp(`[${specialCharPattern}]+`);
const undefinedChars = new RegExp(`[^A-z0-9${specialCharPattern}]+`);
                            //    /[^A-z0-9_ \-]+/g

function ucFirst(str: string) {
  return str.slice(0, 1).toUpperCase() + str.slice(1);
}

function toCamelCase(str: string) {
  return str.replace(specialChars, function(_, letter) {
    return letter.toUpperCase();
  }).replace(endingSpecialChar, '');
}

const emojiTypeUnion: string[] = [];
const emojiDefinitions: [type: string, name: string][] = [];

const used = new Set<string>();

emojiList.forEach(emoji => {
  const aliases = lib[emoji];

  const primaryAlias = aliases[0];

  if (undefinedChars.test(aliases[0])) {
    const badMatch = new RegExp(undefinedChars, 'g');
    const badChars = Array.from(aliases[0].matchAll(badMatch))
    
    throw new Error(`unhandled character in key '${primaryAlias}: ${badChars.map((match) => `'${match[0]}' at position '${match.index}'`)} ''`)
  }

  let normalisedAlias = ucFirst(anySpecialChar.test(primaryAlias) ? toCamelCase(aliases[0]) : aliases[0]);

  if(used.has(normalisedAlias)) {
    let i = 2;
    while(used.has(normalisedAlias+i)) {
      i++
    }
    normalisedAlias = normalisedAlias+i;
  }
  used.add(normalisedAlias);

  const utf16 = utf16FromString(emoji);
  const fileName = `emoji_u${utf16}.png`;
  const aliasEmojiTypeName = `Emoji${normalisedAlias}`;

  emojiTypeUnion.push(aliasEmojiTypeName);
  const aliasEmojiType = `export type ${aliasEmojiTypeName} = ${aliases.map(alias => `"${alias}"`).join(' | ')};`
  const aliasEmojiName = `export const em${normalisedAlias} = import('./png/160/${fileName}');`
  emojiDefinitions.push(
    [aliasEmojiType, aliasEmojiName]
  )
})

const emojiTypeUnionString = `export type EmojiAlias = ${emojiTypeUnion.join(' |\n')};`
writeFile(
  resolve(__dirname, '../src/emojis.ts'), 
`
// This file is auto-generated by script/buildTypes.ts
import './types.d.ts';

${emojiDefinitions.map((def) => def.join('\n')).join('\n')}

${emojiTypeUnionString}
`
)
